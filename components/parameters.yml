fields:
  in: query
  name: fields
  description: |-
    Limit the fields returned in the response object. Useful for optimising queries, but does not play well with
    include.
    
    E.g. for posts `&fields=title,url` would return:
    
    ```json
    {"posts": [{
        "id": "5b7ada404f87d200b5b1f9c8",
        "title": "Welcome to Ghost",
        "url": "https://demo.ghost.io/welcome/"
    }]}
    ```
  required: false
  schema:
    type: array
    items:
      type: string
  style: form
  explode: false

filter:
  in: query
  name: filter
  description: |-
    Apply fine-grained filters to target specific data.
    
    * `&filter=featured:true` on posts, would return only those marked featured.
    * `&filter=tag:getting-started` on posts, would return those with the tag slug that matches `getting-started`.
    
    The possibilities are extensive! Query strings are explained in detail in the [Filtering](#tag/Filtering) section.
  required: false
  schema:
    type: string

formats:
  in: query
  name: formats
  description: |-
    By default, only `html` is returned, however each post and page in Ghost has 2 available formats: `html` and
    `plaintext`.
    
    * `&formats=html,plaintext` will additionally return the plaintext format.
  required: false
  schema:
    type: array
    items:
      type: string
      enum:
        - html
        - plaintext
    default: html

include:
  in: query
  name: include
  description: |-
    Tells the API to return additional data related to the resource you have requested. The following includes are
    available:
    
    * Posts & Pages: `authors`, `tags`
    * Authors: `count.posts`
    * Tags: `count.posts`
    
    Includes can be combined with a comma, e.g. `&include=authors,tags`.
    
    For posts and pages:
    
    * `&include=authors will` add `"authors": [{...},] and "primary_author": {...}`
    * `&include=tags will` add `"tags": [{...},] and "primary_tag": {...}`
    
    For authors and tags:
    
    * `&include=count.posts` will `add "count": {"posts": 7}` to the response.
  required: false
  schema:
    type: array
    items:
      type: string
      enum:
        - authors
        - tags
        - count.posts
  style: form
  explode: false

limit:
  in: query
  name: limit
  description: |-
    By default, only 15 records are returned at once.
    
    * `&limit=5` would return only 5 records.
    * `&limit=all` will return all records - use carefully!
  required: false
  schema:
    type: integer
    default: 15

order:
  in: query
  name: order
  description: |-
    Different resources have a different default sort order:
    
    * Posts: `published_at DESC` (newest post first)
    * Pages: `title ASC` (alphabetically by title)
    * Tags: `name ASC` (alphabetically by name)
    * Authors: `name ASC` (alphabetically by name)
    
    The syntax for modifying this follows SQL order by syntax:
    
    * `&order=published_at%20asc` would return posts with the newest post last
  required: false
  schema:
    type: string

page:
  in: query
  name: page
  description: |-
    By default, the first 15 records are returned.
    
    * `&page=2` will return the second set of 15 records.
  required: false
  schema:
    type: integer
    default: 1
